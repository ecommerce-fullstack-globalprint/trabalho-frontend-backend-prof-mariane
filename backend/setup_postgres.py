#!/usr/bin/env python
"""
Script para configura√ß√£o inicial do banco PostgreSQL
"""
import os

import sys
import subprocess
from pathlib import Path


def run_command(command, description):
    """Executa um comando e mostra o resultado"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Sucesso!")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erro!")
        print(f"Erro: {e.stderr}")
        return False


def main():
    """Fun√ß√£o principal"""
    print("üêò Configura√ß√£o do PostgreSQL para Django")
    print("=" * 50)

    # Verificar se o arquivo .env existe
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("Por favor, configure o arquivo .env conforme o POSTGRES_SETUP.md")
        return

    # Ler configura√ß√µes do .env
    print("üìÑ Lendo configura√ß√µes do .env...")

    # Verificar se psycopg2 est√° instalado
    try:
        import psycopg2
        print("‚úÖ psycopg2-binary est√° instalado")
    except ImportError:
        print("‚ùå psycopg2-binary n√£o est√° instalado")
        print("Execute: pip install psycopg2-binary")
        return

    # Executar comandos Django
    commands = [
        ("python manage.py check", "Verificando configura√ß√£o Django"),
        ("python manage.py makemigrations", "Criando migra√ß√µes"),
        ("python manage.py migrate", "Aplicando migra√ß√µes"),
    ]

    for command, description in commands:
        if not run_command(command, description):
            print(f"\n‚ùå Falha em: {description}")
            print("Verifique as configura√ß√µes do banco de dados no arquivo .env")
            return

    print("\nüéâ Configura√ß√£o conclu√≠da com sucesso!")
    print("\nPr√≥ximos passos:")
    print("1. Execute: python manage.py createsuperuser")
    print("2. Execute: python manage.py runserver")


if __name__ == "__main__":
    main()
